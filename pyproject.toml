[tool.poetry]
name = "ai-review-assistant"
version = "0.4.0"
description = "An AI-powered code review assistant"
authors = ["Viktor Andriichuk <v.andriichuk@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/yourusername/ai_review_assistant"
repository = "https://github.com/yourusername/ai_review_assistant"
keywords = ["ai", "code review", "assistant"]

[tool.poetry.dependencies]
python = "^3.11"
pre-commit = "^3.7.1"
gitpython = "^3.1.43"
langchain = "^0.2.11"
click = "^8.1.7"
langchain-core = "^0.2.23"
langchain-openai = "^0.1.17"
langchain-anthropic = "^0.1.20"
openai = "^1.37.0"
anthropic = "^0.31.2"
types-setuptools = "^71.1.0.20240724"
twine = "^5.1.1"
build = "^1.2.1"

[tool.poetry.group.dev.dependencies]
mypy = "^1.11.0"
ruff = "^0.5.5"
pytest = "^8.3.2"

[tool.poetry.scripts]
install-ai-review-hook = "ai_review_assistant.hooks.pre_commit:install_pre_commit_hook"
ai_review_assistant = "ai_review_assistant.main:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[mypy]
plugins = ["pydantic.mypy"]

[mypy.grpc]
ignore_missing_imports = true
check_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]
norecursedirs = [".git", ".tox"]
addopts = ["-ra", "-q"]

[tool.ruff]
fix = true
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
lint.select = ["ALL"]
lint.ignore = [
    "A003",
    "ANN101",
    "ANN102",
    "ANN204",
    "ANN401",
    "D",
    "EM101",
    "ERA001",
    "FBT",
    "FIX",
    "FIX002",
    "N999",
    "PLR2004",
    "TRY003",
    "TD001",
    "TD002",
    "TD003",
    "EM102",
    "BLE001",
    "TRY400",
    "TRY002",

    "G004",
    "S311",
    "E402",
    "S101",
    "T201", # [Nazareka] for now, llm engine will be with prints, we will replace them with logs later
    "S102", # [Nazareka] we use exec, we made it safe as possible
    "PGH003", # it fixes <Use specific rule codes when ignoring type issues>
    "SIM118", # it fixes <Use `key in dict` instead of `key in dict.keys()`>
    "RET505", # it fixes <Unnecessary `elif` after `return` statement>
    "S307", # it fixes <Use of possibly insecure function; consider using `ast.literal_eval`>
    "RET505", # it fixes  Unnecessary `elif` after `return` statement - we need this functionality
    "E731", # it fixes <Do not assign a lambda expression to a variable>
    "E501", # Line too long (137 > 120)
    "PLR0913", # Too many arguments in function definition (6 > 5)
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = ["ALL"]
lint.unfixable = []
# Exclude a variety of commonly ignored directories.
lint.exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "database/versions",
    "venv",
    ".session",
    "logs",
    ".lock",
    ".toml",
    "tests/*.py",
    "flows/*.py",
]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true
