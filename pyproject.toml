[tool.poetry]
name = "ai-review-assistant"
version = "0.7.0"
description = "An AI-powered code review assistant"
authors = ["Viktor Andriichuk <v.andriichuk@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/vandriichuk/ai_review_assistant"
repository = "https://github.com/vandriichuk/ai_review_assistant"
keywords = ["ai", "code review", "assistant"]

[tool.poetry.dependencies]
python = "^3.11"
pre-commit = "^3.7.1"
gitpython = "^3.1.43"
langchain = "^0.2.11"
click = "^8.1.7"
langchain-core = "^0.2.23"
langchain-openai = "^0.1.17"
langchain-anthropic = "^0.1.20"
openai = "^1.37.0"
anthropic = "^0.31.2"
types-setuptools = "^71.1.0.20240724"
twine = "^5.1.1"
build = "^1.2.1"
importlib-metadata = {version = "^4.0", python = "<3.8"}
toml = "^0.10.2"
types-toml = "^0.10.8.20240310"
rich = "^13.7.1"

[tool.poetry.group.dev.dependencies]
mypy = "^1.11.0"
ruff = "^0.5.5"
pytest = "^8.3.2"

[tool.poetry.scripts]
install-ai-review-hook = "ai_review_assistant.hooks.pre_commit:install_pre_commit_hook"
ai_review_assistant = "ai_review_assistant.main:cli"

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
version_scheme = "no-guess-dev"
local_scheme = "no-local-version"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"

[mypy]
plugins = ["pydantic.mypy"]

[mypy.grpc]
ignore_missing_imports = true
check_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]
norecursedirs = [".git", ".tox"]
addopts = ["-ra", "-q"]

[tool.ruff]
fix = true
lint.select = ["ALL"]
lint.ignore = [
    "A003", "ANN101", "ANN102", "ANN204", "ANN401",
    "D", "EM101", "ERA001", "FBT", "FIX", "FIX002",
    "N999", "PLR2004", "TRY003", "TD001", "TD002",
    "TD003", "EM102", "BLE001", "TRY400", "TRY002",
    "G004", "S311", "E402", "S101", "T201", "S102",
    "PGH003", "SIM118", "RET505", "S307", "E731",
    "E501", "PLR0913"
]
lint.fixable = ["ALL"]
lint.unfixable = []
lint.exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite",
    ".hg", ".mypy_cache", ".nox", ".pants.d", ".pytype",
    ".ruff_cache", ".svn", ".tox", ".venv", "__pypackages__",
    "_build", "buck-out", "build", "dist", "node_modules",
    "database/versions", "venv", ".session", "logs",
    ".lock", ".toml", "tests/*.py", "flows/*.py"
]
line-length = 120
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py311"

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true

[tool.code_review_assistant]
prompt_template = """
You are an AI Code Review Assistant with expert knowledge of {program_language}. As a senior {program_language} developer, review the following code changes:

Project Structure:
{project_structure}

File being reviewed: {file_path}

Analyze the code changes considering these aspects:
1. Code quality and readability
2. Potential bugs or errors
3. Performance implications
4. Consistency with the overall project structure
5. Suggestions for improvement
6. Best practices specific to {program_language}

Instructions for your response:
- Provide a concise summary (about 4-6 points) of your overall findings.
- Focus only on the most important or critical issues, if any.
- Clearly state whether you found any critical issues that need immediate attention.
- Include 1-2 key suggestions for improvement, if applicable.
- If no significant issues were found, briefly mention that the changes look good, but still provide a suggestion for potential enhancement if possible.

Your summary should be structured as follows:
1. Overall assessment (1-2 points)
2. Critical issues (if any) (1-2 points)
3. Key suggestions for improvement (3-4 points)

Provide your summary in {result_output_language}.
"""
